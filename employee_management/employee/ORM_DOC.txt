


CREATING RECORDS

    Create Object for a Model
        >>> obj = MODEL_NAME()
        >>> obj.id = 1
        >>> obj.name = "Somename"
        >>> obj.save()

        >>> MODEL_NAME.objects.create(id=1, name="Somename")

    If we have list of Models, then we can use bulk_create
        >>> MODEL_NAME.objects.bulk_create(MODEL_OBJECTS_LIST)


UPDATING RECORDS
    
    Updating Single Record 
        >>> obj = MODEL_NAME.objects.get(id=7)
        >>> obj.name = "Updated Value"
        >>> obj.save()

        >>> MODEL_NAME.objects.get(id=7).update(name="Updated Value")

    If we have list of Models that needs to be updated, then we can use bulk_update
        >>> MODEL_NAME.objects.bulk_update(MODEL_OBJECTS_LIST)


DELETE RECORDS

    >>> obj = MODEL_NAME.objects.get(id=7)
    >>> obj.delete()

    >>> MODEL_NAME.objects.get(id=7).delete()


RETRIVING RECORDS

    Select * from TABLE
    >>> MODEL_NAME.objects.all()

    Select * from TABLE where id=10
    >>> MODEL_NAME.objects.get(id=10)

    Select * from TABLE where first_name="Ram"
    >>> MODEL_NAME.objects.filter(first_name="Ram")

    select first_name, last_name from TABLE where dob > '1989-01-01'
    >>> MODEL_NAME.objects.filter(dob__gt='1989-01-01').values("first_name", "last_name")


    slect * from TABLE where first_name like '%sh%'
    >>> MODEL_NAME.objects.filter(first_name__contains="sh")

    In the same filter has several attribues to check:
        __contains
        __icontains
        __lt
        __lte 
        __gt 
        __gte
        __startswith
        __endswith
        __in 
    
    Using AND ( & ) and OR ( | ) operators 
        >>> from django.db.models import Q
        
        select * from TABLE where first_name like 'sh%' and last_name like '%sh'
        >>> MODEL_NAME.objects.filter(Q(first_name__statswith="sh") & Q(last_name__endswith="sh"))

    
    Order By
        >>> MODEL_NAME.objects.all().order_by('first_name')  # ASC

        >>> MODEL_NAME.objects.all().order_by('-first_name')  # DESC

    
AGGREGATOR FUNCTION
        Sum, Avg, Min, Max, Count

        >>> from django.db.models import Avg, Sum, Min, Max, Count

        select count(*) from TABLE
        >>> MODEL_NAME.objects.aggregate(Count('id'))

        select count(*) from TABLE where id in (1, 2, 3, 4, 32, 31)
        >>> MODEL_NAME.objects.filter(id__in=[1, 2, 3, 4, 32, 31]).aggregate(Count('id'))


JOINS

    This would do a inner join
    >>> MODEL_NAME.objects.filter(COLUMN_NAME__FORIGEN_COLUMN_NAME="Some value")


RAW SQL 

    >>> MODEL_NAME.objects.raw("Select * from TABlE")


GET THE SQL QUERY OF ORM

    >>> objs = MODEL_NAME.objects.()
    
    objs is QuerySet, this queryset object will have a query attribute, that will print the SQL Query.

    >>> print(str(objs.query)) # This will print a SQL Query generated by ORM



Authentication and Authorization 







